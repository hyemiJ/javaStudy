<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapperInterface.BoardMapper">


	<!-- checkBox test -->
	<select id="bCheckList"
		resultType="com.example.demo03.domain.BoardDTO">
		select seq, id, title, date_format(regdate,'%Y년 %m월 %d일 %H시 %i분 %s초') regdate,
		cnt, root, step, indent
		from board
		<if test="check !=null">		
		where id in 
		<foreach collection="check" item="it" open="(" separator="," close=")">
		#{it}
		</foreach>
		</if>
		order by root desc, step asc
		limit #{startRowNumber} ,
		#{rowsPerPageCount}
	</select>
	
	<select id="checkRowsCount"
		resultType="int">
		select count(*) from board
		<if test="check !=null">		
		where id in 
		<foreach collection="check" item="it" open="(" separator="," close=")">
		#{it}
		</foreach>
		</if>
	</select>


	<!-- ** Board Search PageList => searchType 에 따라 다른 조건문 작성 => 동일한 조건이 count(*) 
		에도 적용되어야함 1) 기본 조건문 만들기 => sql Tag 로 작성, include Tag 로 call 2) 검색조건 : title 
		에 spring 이 포함된 글 select * from board where title Like '%spring%' order ....... 
		=> 즉, % + #{keyword} + % 을위한 문자연산 필요함 -> bind 태그 MySql : CONCAT('%', #{keyword}, 
		'%') Mybatis 구문이 MySql 보다 편리 -->
	<!--1. 조건값 concat 처리. 
	
	2. like 조건문 처리. 
		- 1. all 이면서 keyword가 있을때 ->id , title , content 검색 
		- 2. tc 이면서 keyword가 있을때 -> title , content 검색
		- 3. searchType 가 컬럼명과 같을때 -> 그컬럼명으로 검색.
		-->
	<sql id="search">
		<if test="keyword !=null">
			<bind name="keyValue" value="'%'+keyword+'%'" />
		</if>
		<choose>
			<when test="searchType=='all' and keyword !=null">
				and (id like #{keyValue} or
				title like #{keyValue} or
				content like #{keyValue})
			</when>
			<when test="searchType=='tc' and keyword !=null">
				and (title like #{keyValue} or
				content like #{keyValue})
			</when>
			<when test="searchType!=null and keyword !=null">
			and ${searchType} like #{keyValue}
			</when>

		</choose>
	</sql>

	<!-- bSearchList -->
	<select id="bSearchList"
		resultType="com.example.demo03.domain.BoardDTO">
		select * from board
		where seq>0
		<include refid="search"></include>
		order by root desc, step asc
		limit #{startRowNumber} ,
		#{rowsPerPageCount}
	</select>

	<!-- searchRowsCount -->
	<select id="searchRowsCount" resultType="int">
		select count(*) from board
		where seq>0
		<include refid="search"></include>
	</select>

	<!-- ** Board PageList => MySql: ~~ Limit a, b (a개를 제외하고 b개 : a+1 부터 b 개) 
		=> Oracle: ~~ Between a And b (a 번째부터 b 까지) -->
	<select id="bPageList"
		resultType="com.example.demo03.domain.BoardDTO">
		select * from board
		order by root desc, step asc
		limit
		#{startRowNumber} , #{rowsPerPageCount}
	</select>

	<select id="totalRowsCount" resultType="int">
		select count(*)
		from board
	</select>

	<!-- all row : selectALL -->
	<!-- select * from board order by seq desc -->
	<select id="selectList"
		resultType="com.example.demo03.domain.BoardDTO">
		select * from board order by root desc, step asc
	</select>
	<!-- one row : selectOne -->
	<select id="selectOne"
		resultType="com.example.demo03.domain.BoardDTO">
		select * from board where seq =#{seq}
	</select>
	<!-- row Insert : Insert , seq(auto_increment) == root : ifNull(Max(seq),0)+1 -->
	<!-- ** selectKey Test => AutoNumbering 을 편리하게 할 수 있도록 지원 => DB작업중 먼저 어떤 
		키값을 가져와서 증가시켜서 입력하거나 혹은 입력후에 증가된 키값을 가져올 필요가 있을때마다. selectKey Tag를 이용하면 별도의 
		쿼리로직 없이 해당 메소드에서 일괄처리할 수가 있음. - keyProperty: selectKey구문의 결과가 셋팅될 대상을 지정 
		( 즉, 매개변수로 전달된 dto의 컬럼중 결과가 셋팅될 컬럼 선택 ) - resultType: 결과의 타입. - order: BEFORE 
		또는 AFTER BEFORE로 설정하면 키를 먼저 조회하고 그 값을 keyProperty 에 셋팅한 뒤 insert 구문실행. AFTER로 
		설정하면 insert 구문을 실행한 뒤 selectKey 구문 실행. 오라클에서는 insert구문 내부에서 일관된 호출형태로 처리한다. 
		- statementType: STATEMENT, PREPARED 또는 CALLABLE중 하나 선택가능. 마이바티스에게 Statement, 
		PreparedStatement 또는 CallableStatement를 사용하게 한다. 디폴트는 PREPARED. => Oracle 
		의 경우: (select nvl(max(seq),0)+1 from board) -->

	<insert id="insert">
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			select
			ifNull(Max(seq),0)+1 from board
		</selectKey>
		insert into board(seq,title,content,id,root)
	value(#{seq},#{title},#{content},#{id},#{seq})
	</insert>



	<!-- ** Reply_Insert : 답글입력 => seq 자동생성, root, step, indent 는 dto 로 전달, 
		cnt=0 => 글등록 성공후 stepUpdate 실행 -->
	<insert id="rinsert">
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			select
			ifNull(Max(seq), 0)+1 from board
		</selectKey>
		insert into board(seq, id, title, content, root, step, indent)
		values (
		#{seq},#{id},#{title},#{content},#{root},#{step},#{indent} )
	</insert>

	<!-- ** stepUpdate : step 값 증가 => 조건: root 동일 and step >= #{step} and 현재 
		입력된글은 제외 => 그러므로 selectKey 필요함 -->
	<update id="stepUpdate">
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			select
			ifNull(Max(seq), 0) from board
		</selectKey>
		update board set step=step+1
		where root=#{root} and step>=#{step} and
		seq!=#{seq}
	</update>



	<!--row Update : Update -->
	<update id="update">
		update board set title=#{title},content=#{content},
		cnt=#{cnt}
		where seq=#{seq}
	</update>

	<!-- row Delete : Delete -->
	<!--원글인 경우 seq==root -> 원글 삭제 , 동일 root 삭제 -->
	<!--답글인 경우 seq!=root -> 해당 답글만 삭제 -->
	<delete id="delete">
		delete from board where
		<if test="seq==root">
			root=#{seq}
		</if> <!-- 원글 삭제 : 동일 root 모두 삭제 -->
		<if test="seq!=root">
			seq=#{seq}
		</if>
	</delete>

</mapper>