
*** @RestController
=> 스프링4 부터 추가됨,
	 Controller의 모든 매핑메서드 리턴타입을 기존과 다르게 처리함을 명시
 	 viewPage가 아닌 Data를 다양한 Type으로 return 하며,
	 이들을 JSON이나 XML로 자동으로 처리함. (클라이언트_JS 에서 인식가능 하도록) 
=> @ResponseBody 애너테이션을 생략해도 
   xhr, ajax, fetch, axios(리액트) 등의 비동기 요청에 Data로 응답을 해줄수 있음.
   ( @Controller 사용시 Data 를 return 할때 사용하는 @ 임 ) 
=> Return 데이터 Type
	- String, Integer 등의 단일값
	- 사용자 정의 객체
	- Collection
	- ResponseEntity<> 타입 : 주로 이용됨

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*** Method Mapping
=> GET  : @GetMapping , SELECT
=> POST : @PostMapping , INSERT
=> PUT  : @PutMapping , UPDATE (Key 외에 전체변경시)
=> PATCH: @PatchMapping , UPDATE (부분 변경시)
=> DELETE: @DeleteMapping , DELETE

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

** ResponseEntity
=> Status (200, 404 등 응답 상태 코드) , Headers, Body 등을 함께 전송할수있음. 
=> status : 200(OK), 502(BAD_GATEWAY) , 500(INTERNAL_SERVER_ERROR)
=> 즉, 직접 status code 지정 가능. 
=> 사용법
	- Builder Pattern (권장)
	- Constructor 사용하는 방식 : RESTController 의  axidelete 참고
	
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

** status 
=> https://ko.wikipedia.org/wiki/HTTP_상태코드
1xx (메시지정보): 요청을 받았으며 프로세스를 계속한다
2xx (요청성공): 요청을 성공적으로 받았으며 인식했고 수용하였다
3xx (리다이렉션): 요청 완료를 위해 추가 작업 조치가 필요하다
4xx (클라이언트 오류): 요청의 문법이 잘못되었거나 요청을 처리할 수 없다
5xx (서버 오류): 서버가 명백히 유효한 요청에 대해 충족을 실패했다

400: Bad request (사용자의 잘못된 요청을 처리할 수 없음)
401: Unauthorized (허가_승인 되지 않음, 권한 없음) 
403: Forbidden (금지된, 접근금지, 서버에 요청이 전달되었지만, 권한 때문에 거절되었음을 의미)
( 401은 익명의 사용자, 403는 로그인은 하였으나 권한이 없는 사용자, 
 HTTP1.1 에서는 이 둘을 명확하게 구분하지 않고 Web API의 속성은 대부분 401을 내보낸다고 하지만,
		  401은 익명의 사용자, 403는 로그인은 하였으나 권한이 없는 사용자로 구분 가능하다.
 즉 로그인전 접근시에는 401 , 로그인후 접근시는 403 ) 
415: 지원되지 않는 미디어 유형 (요청이 요청한 페이지에서 지원하지않는 형식으로 되어있음.)

404: Not found (요청한 페이지 없음)
405: Method not allowed (허용되지 않는 http method 사용함)
500: Internal server error (내부 서버 오류)
501: Not implemented (웹 서버가 처리할 수 없음)
503: Service unavailable (서비스 제공 불가)
504: Gateway timeout (게이트웨이 시간초과)
505: HTTP version not supported (해당 http 버전 지원되지 않음)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

** @RequestMapping 및 매핑@ 들 속성
=> value : URL 패턴 ( 와일드카드 * 사용 가능 )
	 @RequestMapping(value="/post")
	 @RequestMapping(value="/post.*")
	 @RequestMapping(value="/post/**/comment")
	 @RequestMapping(value={"/post", "/P"}) : 다중매핑 가능

=> params : 요청 파라미터와 값으로도 구분 가능함.
	@RequestMapping(value="/post", params="useYn=Y")
	-> /post?useYn=Y 일 경우 호출됨
	@RequestMapping(value="/post", params="useYn!=Y")
	->  not equal도 가능
	@RequestMapping(value="/post", parmas="useYn")
	-> 값에 상관없이 파라미터에 useYn이 있을 경우 호출됨
	@RequestMapping(value="/post", params="!useYn")
	-> 파라미터에 useYn이 없어야 호출됨

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*** JSON 제이슨, (JavaScript Object Notation) **********
=> 자바스크립트의 객체표기법으로, 브라우저와 서버사이에서 데이터를 전달할때 사용하는 표준형식.
   속성(key) 과 값(value) 이 하나의 쌍을 이룸
=> JSON의 파일 확장자는 .json
=> 주요 메서드
	- JSON.stringify() : JavaScript 값이나 객체를 JSON 문자열(문자Type)로 변환.
	- JSON.parse() :  JSON 문자열을 구문분석하여 JavaScript 값이나 객체를 생성함.
		
*** JAVA의 Data 객체 -> JSON 변환하기
** 참고용어 
=> 마샬링(Marshalling)
	- 메모리상에 형상화된 객체 데이터를 다른 데이터 형태로 변환하는 과정을 말함.
	- JAVA 객체를 JSON 포맷으로 변환하는것
=> 언마샬링(UnMarshalling)
	- 변환된 데이터를 다시 원래의 객체 모양으로 복원하는 작업
	- JSON 포맷을 JAVA 객체로 변환하는것
=> 직렬화(Serialization)
	- 객체 데이터를 일련의 byte stream으로 변환하는 작업
	- 반대로 일련의 byte stream을 본래 객체 모양으로 복원하는 작업은 역직렬화(Deserialization) 
	- 직렬화와 마샬링은 거의 같은개념이지만, 직렬화 작업이 프로그래밍적으로 보다더 전문화 된것이 마샬링.
	( 즉, 직렬화는 마샬링이 포함된 폭넓은 개념 )

1) GSON
	: 자바 객체의 직렬화/역직렬화를 도와주는 라이브러리 (구글에서 만듦)
	즉, JAVA객체 -> JSON 또는 JSON -> JAVA객체
		
2) @ResponseBody (매핑 메서드에 적용)
	: 메서드의 리턴값이 View 를 통해 출력되지 않고 HTTP Response Body 에 직접 쓰여지게 됨.
	이때 쓰여지기전, 리턴되는 데이터 타입에 따라 종류별 MessageConverter에서 변환이 이뤄진다.
	MappingJacksonHttpMessageConverter 를 사용하면 request, response 를 JSON 으로 변환
	view (~.jsp) 가 아닌 Data 자체를 전달하기위한 용도
	@JsonIgnore : VO 에 적용하면 변환에서 제외

3) jsonView
=> Spring 에서 MappingJackson2JsonView를 사용해서
	ModelAndView를 json 형식으로 반환해 준다.
=> 방법
	-> pom dependency추가
	-> 설정화일 xml 에 bean 등록 
	( 안하면 /WEB-INF/views/jsonView.jsp 를 찾게되고  없으니 404 발생 )
	-> return할 ModelAndView 생성시 View_Name을 "jsonView"로 설정
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
// 
*** fetch
=> fetch(url, [options])
	-> url: 액세스할 URL
	-> options – 선택적 매개변수: 메소드, 헤더 등
	-> fetch 함수의 응답(Response) 처리는 일반적으로 2단계로 함.
	-> 실행후 promise객체를 return 하므로, .then() .catch() .finally() 등의 메서드체인 적용됨. 

=> Response 의 Property
	-> response.status: HTTP 상태 코드(예: 200)
	-> response.ok: Boolean, HTTP 상태 코드가 200-299 사이 이면 True
	-> response.headers: HTTP 헤더가 있는 맵과 유사한 객체 

/*
** Promise
=> 비동기 처리에서 동기식(순차적) 처리를 지원해줌.
    즉, 지연함수 와 비동기연산(Ajax) 을 제어할 수 있도록 해주는 객체. 
   ( 지연함수: 지정한 시간 후에 실행 되도록 정의한 함수 )
=> 기본형식
	promise.then(function(count){
    		console.log("** Test2) resolve count => "+count); 
    	}).catch(function(message){
    		console.log("** Test2) reject message => "+message); 
    	}).finally(function(){
    		console.log("** Test2) finally Test"); 
    	});
*/

