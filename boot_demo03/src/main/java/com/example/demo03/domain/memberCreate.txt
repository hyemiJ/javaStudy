===========================================================
----------------------------------------------------------------------------------------------------
** DataBase 
* 확인 => drop database javadb;
*  만들기   => create database mydb ;
*  확인하기 => show databases ; 
	       => 설치시 자동생성: test , mysql(mysql의 다양한 정보 저장)

*  사용하기 => use mydb ;
*  현재 사용중인 DB 표시하기 => select database() ;
*  삭제하기 => drop database db1 ;
               => select database() ;

-----------------------------------------------------------------------------------
** Student & Jo (수정전)
create table student(
		sno int  auto_increment,
		name varchar(10) not null,
		age int(3),
		jno int(1),
		info varchar(30),
		point float(5,2) default 100,
		Primary Key(sno),
		Check(age>15 and age<100)
  );

create table jo (
		jno int(1),
		jname varchar(10) not null,
		captain int not null,
		project varchar(20) not null,
		slogan varchar(30) not null,
		Primary Key(jno)
	);
-----------------------------------------------------------------------------------
*** web02 를 위한 Table 작업

1) Member Create  & Insert
=> Create
drop table member;

create  table member (    
id varchar(10) primary key,
password varchar(10) not null,
name varchar(30),
age int(3),
jno int(1),
info varchar(30),
point float(7,2),
birthday varchar(10),
rid varchar(10)
); 

=> Insert
-> column 갯수와 Type 이 다르면 column 명 지정해야함  
insert into member(id, password, name, age, jno, info, point, birthday)
select sno, sno, name, age, jno, info, point, birthday from student;  

select * from member;
update member set password='12345!' , birthday='1999-09-09' ;

select * from member;

=> password update
update member set password='12345!';

=> 각자 id , rid , birthday 수정문 올려주세요~
 

select * from member;

-> 관리조 는 모두 7조로 변경
update member set jno=7 where jno=9;

2) Jo 
=> captain 컬럼  varchar(10) 으로 수정
=> Data update

ALTER TABLE jo MODIFY captain varchar(10);
 
update jo set captain='admin' where jno ='7';	
select * from jo;

==============================================

3) Java Code : 프로젝트 web02

=> MemberDTO, MemberDAO, MemberService
=> Controller, View
=> memberList

4) 로그인, 로그아웃, MyInfo 구현
=> loginForm.jsp , 컨트롤러 C02_Login,  컨트롤러 C02_Logout
=> 로그인 성공 : home.jsp  : ~~님 안녕하세요 ~~, 로그인후 메뉴로
=> 로그인 실패 : loginForm 으로 재로그인 유도

=> Myinfo(mdetail)
	-> C03_mDetail.java, memberDetail.jsp 

5) 회원가입 구현
=> home.jsp : 메뉴추가 ( JoinF -> joinForm.jsp )
=> joinForm.jsp : action="/web02/mjoin"
=> 컨트롤러 : C04_mJoin.java 
		-> 성공 : 로그인 유도 ( loginForm.jsp )
		-> 실패 : 재가입 유도 ( joinForm.jsp )

6) 내정보 수정하기
=> 메뉴 추가
=> 수정 -> 내정보를 표시한 (Controller) ->  수정가능한  Form :  updateForm.jsp
=> 컨트롤러 : C05_mUpdatejava 
		-> 성공 : 내정보 표시 ( memberDetail.jsp )
		-> 실패 : 재수정 유도 ( updateForm.jsp )

7) 회원탈퇴
=> 메뉴 추가
=> 삭제 컨트롤러 : C06_mDelete.java 
		-> 성공 : home.jsp ( message : 탈퇴 성공 !!! )
		-> 실패 : home.jsp ( message : 탈퇴 실패 !!! )
 
=========================================================
=========================================================
이미지 경로에 대한 추가
=========================================================
=========================================================

*** UploadFile 

** member 에 Image 추가하기
 
=> member table, image 컬럼 (uploadfile varchar(50)) 추가

=> View 수정
    - joinForm, updateForm, memberDetail, memberList 

=> Java 수정
    - MemberDTO, Controller 의 mjoin 메서드, ~Mapper.xml

---------------------------------------------------------

** Spring FileUpLoad 실습 

1.  Table 구조 변경

=> member Table member Image 필드 추가하기
    -> MySql
    alter table member ADD uploadfile varchar(100)   default 'aaa.gif' ;
    select id, name, uploadfile from member;
    -> 조별로 image 수정
    update member set uploadfile='bbb.gif' where jno=2;
    update member set uploadfile='ccc.gif' where jno=3;
    update member set uploadfile='ddd.gif' where jno=4;
    update member set uploadfile='eee.gif' where jno=7;
    update member set uploadfile='xxx.gif' where jno=8;

2.     joinForm, updateForm 수정

** Multipart form data
=> multipart/form-data는 파일 업로드가 있는 양식요소에 사용되는 enctype 속성의 값중 하나이고, 
    multipart는 폼데이터가 여러 부분으로 나뉘어 서버로 전송되는 것을 의미
=> 이 폼이 제출될 때 이 형식이 어떤것인지를 알려주며, 
    multipart/form-data로 지정이 되어 있어야 서버에서 정상적으로 데이터를 처리할 수 있다. 


** <form enctype="속성값">
    <form> 태그의 데이터 (input 의 value)가 서버로 제출될 때 해당 데이터가 인코딩되는 방법을 명시함.
    
=> application/x-www-form-urlencoded; charset=UTF-8
    default 값으로, 모든 문자들은 서버로 보내기 전에 인코딩됨을 명시함.
    주로 $("#formid").serialize() 로 데이터를 보내며
    서버의 Spring Controller에서는 @RequestParam 혹은 @ModelAttribute로 데이터를 받음 

=> multipart/form-data 
    모든 문자를 인코딩하지 않음을 명시함.
    이 방식은 <form> 요소가 FormData 로 파일이나 이미지를 서버로 전송할 때 주로 사용함.
    Ajax 방식의 FormData로 전송하기 위해서는 processData : false, contentType : false 로 세팅하여야함.
    서버의 Spring Controller에서는 MultipartResolver 를 통해 데이터를 받아줌.

=> text/plain
    공백 문자(space)는 "+" 기호로 변환하지만, 나머지 문자는 모두 인코딩되지 않음을 명시함. 

---------------------------------------------------------

3. application.properties 설정  

#Multipart
#spring.servlet.multipart.max-file-size=100MB
# => 요청 받을 수 있는 파일의 최대 사이즈
#spring.servlet.multipart.max-request-size=100MB
# => 요청 받을 수 있는 데이터 전체의 최대 사이즈